import java.time.Instant;
import java.util.Arrays;
class NQueen1{

	static final int N = 8;
	
	static void printSolution(int board[][])
	{
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				if (board[i][j] == 1)
					System.out.print("Q ");
				else
					System.out.print(". ");                             
			}
			System.out.println();
		}
    }

	static boolean isSafe(int[][] board, int row, int col)
	{

		for (int x = 0; x < col; x++)
			if (board[row][x] == 1)
				return false;

		for (int x = row, y = col; x >= 0 && y >= 0;
			x--, y--)
			if (board[x][y] == 1)
				return false;

		for (int x = row, y = col; x < N && y >= 0;
			x++, y--)
			if (board[x][y] == 1)
				return false;
		return true;
	}

	static boolean solveNQueens(int[][] board, int col)
	{

		if (col == N) {
			printSolution(board);
			return true;
		}

		for (int i = 0; i < N; i++) {
			if (isSafe(board, i, col)) {
				board[i][col] = 1;
				if (solveNQueens(board, col + 1))
					return true;

				board[i][col] = 0;
			}
		}

		return false;
		
	}

	public static void main(String[] args)
	{
		int[][] board = new int[N][N];
        Instant start = Instant.now();
        if (!solveNQueens(board, 0))
			System.out.println("No solution found");
            Instant end = Instant.now();
            long executionTime = end.toEpochMilli() - start.toEpochMilli();
            System.out.println("Execution time: " + executionTime + " milliseconds");
		
        
	}
}
